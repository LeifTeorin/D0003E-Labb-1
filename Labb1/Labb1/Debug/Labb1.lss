
Labb1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000212  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a17  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008df  00000000  00000000  00000d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000312  00000000  00000000  00001646  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000453  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020b  00000000  00000000  00001e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e1       	ldi	r30, 0x12	; 18
  70:	f2 e0       	ldi	r31, 0x02	; 2
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  82:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <LCD_init>:
		
    }
}

void LCD_init(void){
	LCDCRA = 0xc0; // (1<<LCDEN);						
  8a:	80 ec       	ldi	r24, 0xC0	; 192
  8c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	LCDCRB = 0xb7; //(1<<LCDCS)  | (1<<LCDMUX1) | (1<<LCDPM2);		
  90:	87 eb       	ldi	r24, 0xB7	; 183
  92:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = 0x07; //(1<<LCDCD1) | (1<<LCDCD2);					
  96:	87 e0       	ldi	r24, 0x07	; 7
  98:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCCR = 0x0f; //(1<<LCDDC1) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1);								
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  a2:	08 95       	ret

000000a4 <writeChar>:
}

void writeChar(char ch, int pos){
	if(pos>5 | pos<0){
  a4:	66 30       	cpi	r22, 0x06	; 6
  a6:	71 05       	cpc	r23, r1
  a8:	90 f5       	brcc	.+100    	; 0x10e <writeChar+0x6a>
		return;
	}
	int shift;
	char mask_reg;
	int character = characters[(int)ch];
  aa:	e8 2f       	mov	r30, r24
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	e0 50       	subi	r30, 0x00	; 0
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	40 81       	ld	r20, Z
  b8:	51 81       	ldd	r21, Z+1	; 0x01
	char currbyte = 0x00;
	char *ptr;
	ptr  = &LCDDR0;
	
	if(pos & 0x01){
  ba:	60 ff       	sbrs	r22, 0
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <writeChar+0x20>
		mask_reg = 0x0f;
  be:	af e0       	ldi	r26, 0x0F	; 15
		shift = 4;
  c0:	b4 e0       	ldi	r27, 0x04	; 4
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <writeChar+0x24>
	}else{
		mask_reg = 0xf0;
  c4:	a0 ef       	ldi	r26, 0xF0	; 240
		shift = 0;
  c6:	b0 e0       	ldi	r27, 0x00	; 0
	}
	ptr = ptr + (pos>>1);
  c8:	75 95       	asr	r23
  ca:	67 95       	ror	r22
  cc:	fb 01       	movw	r30, r22
  ce:	e4 51       	subi	r30, 0x14	; 20
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
	
	for(int i = 0; i < 4; i++){
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	18 c0       	rjmp	.+48     	; 0x108 <writeChar+0x64>
		currbyte = (character & 0x0f);
  d8:	84 2f       	mov	r24, r20
  da:	8f 70       	andi	r24, 0x0F	; 15
		currbyte = currbyte << shift;
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0b 2e       	mov	r0, r27
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <writeChar+0x42>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <writeChar+0x3e>
		*ptr = ((*ptr & mask_reg)|currbyte);
  ea:	90 81       	ld	r25, Z
  ec:	9a 23       	and	r25, r26
  ee:	89 2b       	or	r24, r25
  f0:	80 83       	st	Z, r24
		character = (character>>4);
  f2:	55 95       	asr	r21
  f4:	47 95       	ror	r20
  f6:	55 95       	asr	r21
  f8:	47 95       	ror	r20
  fa:	55 95       	asr	r21
  fc:	47 95       	ror	r20
  fe:	55 95       	asr	r21
 100:	47 95       	ror	r20
		ptr += 5;
 102:	35 96       	adiw	r30, 0x05	; 5
		mask_reg = 0xf0;
		shift = 0;
	}
	ptr = ptr + (pos>>1);
	
	for(int i = 0; i < 4; i++){
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
 108:	24 30       	cpi	r18, 0x04	; 4
 10a:	31 05       	cpc	r19, r1
 10c:	2c f3       	brlt	.-54     	; 0xd8 <writeChar+0x34>
 10e:	08 95       	ret

00000110 <writeLong>:
	}
	
	
}

void writeLong(long i){
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	long y = i;
	int ch;
	int cntr = 5;
 11c:	c5 e0       	ldi	r28, 0x05	; 5
 11e:	d0 e0       	ldi	r29, 0x00	; 0
	while(y>0){
 120:	15 c0       	rjmp	.+42     	; 0x14c <writeLong+0x3c>
		if(cntr<0){
 122:	dd 23       	and	r29, r29
 124:	c4 f0       	brlt	.+48     	; 0x156 <writeLong+0x46>
			return;
		}
		ch = y%10;
 126:	2a e0       	ldi	r18, 0x0A	; 10
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	0e 94 c6 00 	call	0x18c	; 0x18c <__divmodsi4>
 132:	e2 2e       	mov	r14, r18
 134:	f3 2e       	mov	r15, r19
 136:	04 2f       	mov	r16, r20
 138:	15 2f       	mov	r17, r21
 13a:	86 2f       	mov	r24, r22
		writeChar(ch, cntr);
 13c:	be 01       	movw	r22, r28
 13e:	0e 94 52 00 	call	0xa4	; 0xa4 <writeChar>
		y = y/10;
 142:	6e 2d       	mov	r22, r14
 144:	7f 2d       	mov	r23, r15
 146:	80 2f       	mov	r24, r16
 148:	91 2f       	mov	r25, r17
		cntr--;
 14a:	21 97       	sbiw	r28, 0x01	; 1

void writeLong(long i){
	long y = i;
	int ch;
	int cntr = 5;
	while(y>0){
 14c:	16 16       	cp	r1, r22
 14e:	17 06       	cpc	r1, r23
 150:	18 06       	cpc	r1, r24
 152:	19 06       	cpc	r1, r25
 154:	34 f3       	brlt	.-52     	; 0x122 <writeLong+0x12>
		writeChar(ch, cntr);
		y = y/10;
		cntr--;
	}
	
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	08 95       	ret

00000164 <main>:
	0x1510		// J
};

int main(void)
{
	CLKPR = 0x80;	
 164:	e1 e6       	ldi	r30, 0x61	; 97
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	c0 e8       	ldi	r28, 0x80	; 128
 16a:	c0 83       	st	Z, r28
	CLKPR =	0x00;	
 16c:	10 82       	st	Z, r1
	
	// Device Initialization values:
	
	LCD_init();
 16e:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_init>
	
	PORTB = (1 << PORTB7);			//Button Setting.
 172:	c5 b9       	out	0x05, r28	; 5
    /* Replace with your application code */
	int thing = (19%10);
	writeLong(123456789);
 174:	65 e1       	ldi	r22, 0x15	; 21
 176:	7d ec       	ldi	r23, 0xCD	; 205
 178:	8b e5       	ldi	r24, 0x5B	; 91
 17a:	97 e0       	ldi	r25, 0x07	; 7
 17c:	0e 94 88 00 	call	0x110	; 0x110 <writeLong>
	LCDDR0 = LCDDR0|0x66;
 180:	ec ee       	ldi	r30, 0xEC	; 236
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	86 66       	ori	r24, 0x66	; 102
 188:	80 83       	st	Z, r24
 18a:	ff cf       	rjmp	.-2      	; 0x18a <main+0x26>

0000018c <__divmodsi4>:
 18c:	05 2e       	mov	r0, r21
 18e:	97 fb       	bst	r25, 7
 190:	1e f4       	brtc	.+6      	; 0x198 <__divmodsi4+0xc>
 192:	00 94       	com	r0
 194:	0e 94 dd 00 	call	0x1ba	; 0x1ba <__negsi2>
 198:	57 fd       	sbrc	r21, 7
 19a:	07 d0       	rcall	.+14     	; 0x1aa <__divmodsi4_neg2>
 19c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__udivmodsi4>
 1a0:	07 fc       	sbrc	r0, 7
 1a2:	03 d0       	rcall	.+6      	; 0x1aa <__divmodsi4_neg2>
 1a4:	4e f4       	brtc	.+18     	; 0x1b8 <__divmodsi4_exit>
 1a6:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__negsi2>

000001aa <__divmodsi4_neg2>:
 1aa:	50 95       	com	r21
 1ac:	40 95       	com	r20
 1ae:	30 95       	com	r19
 1b0:	21 95       	neg	r18
 1b2:	3f 4f       	sbci	r19, 0xFF	; 255
 1b4:	4f 4f       	sbci	r20, 0xFF	; 255
 1b6:	5f 4f       	sbci	r21, 0xFF	; 255

000001b8 <__divmodsi4_exit>:
 1b8:	08 95       	ret

000001ba <__negsi2>:
 1ba:	90 95       	com	r25
 1bc:	80 95       	com	r24
 1be:	70 95       	com	r23
 1c0:	61 95       	neg	r22
 1c2:	7f 4f       	sbci	r23, 0xFF	; 255
 1c4:	8f 4f       	sbci	r24, 0xFF	; 255
 1c6:	9f 4f       	sbci	r25, 0xFF	; 255
 1c8:	08 95       	ret

000001ca <__udivmodsi4>:
 1ca:	a1 e2       	ldi	r26, 0x21	; 33
 1cc:	1a 2e       	mov	r1, r26
 1ce:	aa 1b       	sub	r26, r26
 1d0:	bb 1b       	sub	r27, r27
 1d2:	fd 01       	movw	r30, r26
 1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <__udivmodsi4_ep>

000001d6 <__udivmodsi4_loop>:
 1d6:	aa 1f       	adc	r26, r26
 1d8:	bb 1f       	adc	r27, r27
 1da:	ee 1f       	adc	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	a2 17       	cp	r26, r18
 1e0:	b3 07       	cpc	r27, r19
 1e2:	e4 07       	cpc	r30, r20
 1e4:	f5 07       	cpc	r31, r21
 1e6:	20 f0       	brcs	.+8      	; 0x1f0 <__udivmodsi4_ep>
 1e8:	a2 1b       	sub	r26, r18
 1ea:	b3 0b       	sbc	r27, r19
 1ec:	e4 0b       	sbc	r30, r20
 1ee:	f5 0b       	sbc	r31, r21

000001f0 <__udivmodsi4_ep>:
 1f0:	66 1f       	adc	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	88 1f       	adc	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	1a 94       	dec	r1
 1fa:	69 f7       	brne	.-38     	; 0x1d6 <__udivmodsi4_loop>
 1fc:	60 95       	com	r22
 1fe:	70 95       	com	r23
 200:	80 95       	com	r24
 202:	90 95       	com	r25
 204:	9b 01       	movw	r18, r22
 206:	ac 01       	movw	r20, r24
 208:	bd 01       	movw	r22, r26
 20a:	cf 01       	movw	r24, r30
 20c:	08 95       	ret

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
