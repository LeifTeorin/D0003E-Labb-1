
Labb1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c4  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000896  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000294  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000da  00000000  00000000  00001bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001ca5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea e4       	ldi	r30, 0x4A	; 74
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 88 00 	call	0x110	; 0x110 <main>
  82:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <LCD_init>:
		writeChar(0, 2);
    }
}

void LCD_init(void){
	LCDCRA = 0xc0; // (1<<LCDEN);						
  8a:	80 ec       	ldi	r24, 0xC0	; 192
  8c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	LCDCRB = 0xb7; //(1<<LCDCS)  | (1<<LCDMUX1) | (1<<LCDPM2);		
  90:	87 eb       	ldi	r24, 0xB7	; 183
  92:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	LCDFRR = 0x07; //(1<<LCDCD1) | (1<<LCDCD2);					
  96:	87 e0       	ldi	r24, 0x07	; 7
  98:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	LCDCCR = 0x0f; //(1<<LCDDC1) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1);								
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  a2:	08 95       	ret

000000a4 <writeChar>:
}

void writeChar(char ch, int pos){
	if(pos>5 | pos<0){
  a4:	66 30       	cpi	r22, 0x06	; 6
  a6:	71 05       	cpc	r23, r1
  a8:	90 f5       	brcc	.+100    	; 0x10e <writeChar+0x6a>
		return;
	}
	int shift;
	char mask_reg;
	int character = characters[(int)ch];
  aa:	e8 2f       	mov	r30, r24
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	e0 50       	subi	r30, 0x00	; 0
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	40 81       	ld	r20, Z
  b8:	51 81       	ldd	r21, Z+1	; 0x01
	char currbyte = 0x00;
	char *ptr;
	ptr  = &LCDDR0;
	
	if(pos & 0x01){
  ba:	60 ff       	sbrs	r22, 0
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <writeChar+0x20>
		mask_reg = 0x0f;
  be:	af e0       	ldi	r26, 0x0F	; 15
		shift = 4;
  c0:	b4 e0       	ldi	r27, 0x04	; 4
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <writeChar+0x24>
	}else{
		mask_reg = 0xf0;
  c4:	a0 ef       	ldi	r26, 0xF0	; 240
		shift = 0;
  c6:	b0 e0       	ldi	r27, 0x00	; 0
	}
	ptr = ptr + (pos>>1);
  c8:	75 95       	asr	r23
  ca:	67 95       	ror	r22
  cc:	fb 01       	movw	r30, r22
  ce:	e4 51       	subi	r30, 0x14	; 20
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
	
	for(int i = 0; i < 4; i++){
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	18 c0       	rjmp	.+48     	; 0x108 <writeChar+0x64>
		currbyte = (character & 0x0f);
  d8:	84 2f       	mov	r24, r20
  da:	8f 70       	andi	r24, 0x0F	; 15
		currbyte = currbyte << shift;
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0b 2e       	mov	r0, r27
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <writeChar+0x42>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <writeChar+0x3e>
		character = (character>>4);
  ea:	55 95       	asr	r21
  ec:	47 95       	ror	r20
  ee:	55 95       	asr	r21
  f0:	47 95       	ror	r20
  f2:	55 95       	asr	r21
  f4:	47 95       	ror	r20
  f6:	55 95       	asr	r21
  f8:	47 95       	ror	r20
		*ptr = ((*ptr & mask_reg)|currbyte);
  fa:	90 81       	ld	r25, Z
  fc:	9a 23       	and	r25, r26
  fe:	89 2b       	or	r24, r25
 100:	80 83       	st	Z, r24
		ptr += 5;
 102:	35 96       	adiw	r30, 0x05	; 5
		mask_reg = 0xf0;
		shift = 0;
	}
	ptr = ptr + (pos>>1);
	
	for(int i = 0; i < 4; i++){
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
 108:	24 30       	cpi	r18, 0x04	; 4
 10a:	31 05       	cpc	r19, r1
 10c:	2c f3       	brlt	.-54     	; 0xd8 <writeChar+0x34>
 10e:	08 95       	ret

00000110 <main>:
	0x1510		// J
};

int main(void)
{
	CLKPR = 0x80;	//(1<<CLKPCE);
 110:	e1 e6       	ldi	r30, 0x61	; 97
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	c0 e8       	ldi	r28, 0x80	; 128
 116:	c0 83       	st	Z, r28
	CLKPR =	0x00;	//(0<<CLKPS3);
 118:	10 82       	st	Z, r1
	
	// Device Initialization values:
	
	LCD_init();
 11a:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_init>
	
	PORTB = (1 << PORTB7);			//Button Setting.
 11e:	c5 b9       	out	0x05, r28	; 5
    /* Replace with your application code */
	
    while (1) 
    {
		writeChar(4, 0);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 52 00 	call	0xa4	; 0xa4 <writeChar>
		writeChar(2, 1);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 52 00 	call	0xa4	; 0xa4 <writeChar>
		writeChar(0, 2);
 138:	62 e0       	ldi	r22, 0x02	; 2
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 52 00 	call	0xa4	; 0xa4 <writeChar>
 144:	ed cf       	rjmp	.-38     	; 0x120 <main+0x10>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
